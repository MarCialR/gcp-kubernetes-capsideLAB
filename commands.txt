# To install docker and gcloud tools on the debian VM. As root, or with sudo:

apt-get install apt-transport-https ca-certificates
apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
echo "deb https://apt.dockerproject.org/repo debian-jessie main" > /etc/apt/sources.list.d/docker.list
apt-get update
apt-get install docker-engine
service docker start

# pipe bash lol
curl https://sdk.cloud.google.com | bash i
gcloud components update kubectl


# To login to the gce account and setup kubernetes to start working with the created cluster
gcloud init
gcloud container clusters get-credentials kubernetesdemo

# Check that the basic services are installed in the gcloud kubernetes cluster
kubectl --namespace=kube-system get services

# Namespaces creation
./createNamespaces.sh

# Contexts for the namespaces
kubectl config set-context dev --namespace=development --cluster=clusterName --user=userName
kubectl config set-context prod --namespace=development --cluster=clusterName --user=userName

# Use the dev context
kubectl config use-context d

# Put the docker images to the google container registry
docker build -t tagName . #for each folder of the different images
#tagName = eu.gcr.io/kubernetesdemo/frontend for example. eu.gcr.io is the google registry for the europe region, /kubernetesdemo is the name of your project, and /frontend is the name of your image.
# The kubernetes deploy files expect the following images to be accesible on the google account:
# - eu.gcr.io/kubernetesdemo/frontend:latest
# - eu.gcr.io/kubernetesdemo/backend-api:latest
# - eu.gcr.io/kubernetesdemo/mysql:latest
# So if your project is named otherwise, modify the kubernetes files
gcloud docker push eu.gcr.io/kubernetesdemo/imageName

# Deploy!
./deployAll.sh



# General commands to inspect the deployment
kubectl get rc # List deployed replicatoin controllers
kubectl get services # List deployed services
kubectl get pods # list deployed pods

